# Zadanie dla ciebie (praktyczne, ale mƒÖdre):

# Spr√≥buj napisaƒá dict comprehension, kt√≥re buduje s≈Çownik z d≈Çugo≈õci nazw zwierzƒÖt:

# animals = ["kot", "chomik", "pies", "≈ºyrafa"]

# # twoje zadanie: zr√≥b s≈Çownik {nazwa: d≈Çugo≈õƒá}


# üëâ potem odpowiedz:

# jaki bƒôdzie wynik,

# jak Python buduje to krok po kroku,

# jak by≈õ zrobi≈Ç to samo przy u≈ºyciu listy krotek (tuple) i funkcji dict().
# ***********************************************************************************************

# animals = ["kot", "chomik", "pies", "≈ºyrafa"]
# animal_cout={animal: len(animal) for animal in animals}
# print(animal_cout)
# ***********************************************************************************************
# ***********************************************************************************************
# Chcesz zobaczyƒá magiƒô z kolejnym poziomem trudno≈õci?

# Spr√≥bujmy co≈õ bardziej ‚Äû≈ºyciowego‚Äù ‚Äî czyli comprehension z warunkiem (if) i ma≈ÇƒÖ transformacjƒÖ danych.
# Zobacz przyk≈Çad:

# animals = ["kot", "chomik", "pies", "≈ºyrafa", "lew", "boa"]

# long_animals = {a: len(a) for a in animals if len(a) > 3}
# print(long_animals)


# üß© Pytania do ciebie:

# Jakie bƒôdƒÖ klucze w long_animals?

# Jak Python przetwarza tƒô instrukcjƒô logicznie?

# Co by siƒô zmieni≈Ço, gdyby≈õ u≈ºy≈Ç if na ko≈Ñcu zamiast po warto≈õci, np.:

# {len(a): a for a in animals if len(a) > 3}


# ‚Äî jakie bƒôdƒÖ wtedy klucze, jakie warto≈õci i czemu to robi du≈ºƒÖ r√≥≈ºnicƒô?
# ***********************************************************************************************

# animals = ["kot", "chomik", "pies", "≈ºyrafa", "lew", "boa"]

# long_animals = {a: len(a) for a in animals if len(a) > 3}
# # {len(a): a for a in animals if len(a) > 3} PO ODWROCENIU NADPISUJE WARTOSC DLA KLUCZA"6"
# print(long_animals)
# ***********************************************************************************************
# ***********************************************************************************************
# animals = {"kot", "pies"}
# print(animals.__sizeof__())
# print(dict.fromkeys(animals).__sizeof__())

# ***********************************************************************************************
# ***********************************************************************************************
# TL;DR (to, co warto zapisaƒá do notatek)

# Index = hash & (size-1) (size = potƒôga 2, liczba slot√≥w).

# Kolizje ‚Üí ‚Äûnastƒôpne sloty z zawijaniem‚Äù (w rzeczywisto≈õci trochƒô sprytniej).

# Zbyt pe≈Çne? ‚Üí resize (zwykle √ó2) + rehash ‚Üí nadal ≈õrednio O(1).

# REPL = interaktywna konsola do eksperyment√≥w.

# Ma≈Çe r√≥≈ºnice w __sizeof__ sƒÖ normalne (nag≈Ç√≥wki/align/pola).
# ***********************************************************************************************
# ***********************************************************************************************
# Masz listƒô z duplikatami:

# nums = [1,2,2,3,3,3,4,4,4,4]


# Zbuduj set z nums. Jaki wynik i dlaczego?

# Zbuduj dict mapujƒÖcy liczbƒô ‚Üí liczno≈õƒá za pomocƒÖ comprehension (podpowied≈∫: dwa przebiegi lub get):

# counts = {n: ??? for n in set(nums)}


# Co siƒô stanie, je≈õli zamienisz klucz i warto≈õƒá?

# Odpowiedz kr√≥tko. Jak to z≈Çapiesz, wracasz do Cisco z turbo-intuicjƒÖ o tuple/set/dict.
# ***********************************************************************************************
# nums = [1,2,2,3,3,3,4,4,4,4]
# counts={n: None for n in set(nums)}
# print(set(counts))
# ***********************************************************************************************
# ***********************************************************************************************
# Mini-ƒáwiczenie (≈ºeby to siƒô zapisa≈Ço w m√≥zgu)

# Spr√≥buj napisaƒá comprehension, kt√≥re liczy wystƒÖpienia tylko liczb parzystych z listy nums.
# Czyli wynik ma wyglƒÖdaƒá tak:

# {2: 2, 4: 4}


# Zr√≥b to najpierw z .count(), potem z .get() (czyli ‚Äûmanualnie‚Äù).
# ***********************************************************************************************
# from collections import Counter
# nums = [1,2,2,3,3,3,4,4,4,4]
# counts={n:nums.count(n) for n in set(nums) if n%2==0} # wersja z .count()
# count={}
# for n in nums:
#     count[n]=count.get(n,0)+1 # wersja z .get()
# count=Counter(nums) # wersja z collections Counter
# print(count)


# ***********************************************************************************************
# ***********************************************************************************************
# Liczenie liter w zdaniu (tw√≥j w≈Çasny mini-Counter)
# ***********************************************************************************************
# sentence = "harvard python rocks"
# counts = {}
# for char in sentence:
#     if char != " ":
#         counts[char] = counts.get(char, 0) + 1
# print(counts)
# ***********************************************************************************************
# ***********************************************************************************************
# Grupowanie s≈Ç√≥w po pierwszej literze
# ***********************************************************************************************
# words = ["apple", "ant", "banana", "berry", "cherry"]
# groups = {}

# for w in words:
#     first = w[0]
#     groups[first] = groups.get(first, []) + [w]

# print(groups)
# ***********************************************************************************************
# Zliczanie typ√≥w danych w li≈õcie
# ***********************************************************************************************
# items = [1, "a", 2.5, "b", True, None, 3]
# types = {}

# for i in items:
#     t = type(i).__name__
#     types[t] = types.get(t, 0) + 1

# print(types)
# ***********************************************************************************************
# ***********************************************************************************************
# Zliczanie s≈Ç√≥w w tek≈õcie (wersja prawdziwego kodera)
# ***********************************************************************************************
# text = "Python is great and Python is simple"
# counts = {}
# for word in text.lower().split():
#     counts[word] = counts.get(word, 0) + 1

# print(counts)
# ***********************************************************************************************
# ***********************************************************************************************
# Tworzenie mapy ‚Äûostatni indeks wystƒÖpienia‚Äù
# ***********************************************************************************************
# nums = [5, 2, 5, 3, 2, 5]
# positions = {}

# for idx, n in enumerate(nums):
#     positions[n] = idx

# print(positions)
# ***********************************************************************************************
# ***********************************************************************************************
# Wzorzec
# d[x] = d.get(x, 0) + 1	licznik (sumowanie warto≈õci)
# d[x] = d.get(x, []) + [nowy]	grupowanie element√≥w
# `d[x] = d.get(x, set())	dodawanie unikalnych warto≈õci
# d[x] = co≈õ	nadpisywanie (nie wymaga get)
# ***********************************************************************************************
# ***********************************************************************************************
# Zadanie: analiza transakcji w sklepie

# Masz listƒô zakup√≥w, gdzie ka≈ºda pozycja to (klient, produkt):

# purchases = [
#     ("Ala", "jab≈Çko"),
#     ("Olek", "gruszka"),
#     ("Ala", "banan"),
#     ("Olek", "jab≈Çko"),
#     ("Ala", "gruszka"),
#     ("Basia", "banan"),
#     ("Olek", "banan"),
#     ("Basia", "jab≈Çko"),
# ]


# Chcemy dowiedzieƒá siƒô trzech rzeczy:

# 1Ô∏è‚É£ Ile ka≈ºdy klient zrobi≈Ç zakup√≥w?
# (np. Ala: 3, Olek: 3, Basia: 2)

# 2Ô∏è‚É£ Ile razy kupiono ka≈ºdy produkt?
# (np. jab≈Çko: 3, banan: 3, gruszka: 2)

# 3Ô∏è‚É£ Jakie produkty kupi≈Ç ka≈ºdy klient ‚Äî jako lista (np. Ala: ['jab≈Çko', 'banan', 'gruszka']).
# Twoje zadanie

# Spr√≥buj sam napisaƒá kod, kt√≥ry:

# tworzy trzy s≈Çowniki: client_counts, product_counts, client_items

# w jednej pƒôtli for name, item in purchases:

# po zako≈Ñczeniu drukuje ka≈ºdy z nich.

# ***********************************************************************************************

purchases = [
    ("Ala", "jab≈Çko"),
    ("Olek", "gruszka"),
    ("Ala", "banan"),
    ("Olek", "jab≈Çko"),
    ("Ala", "gruszka"),
    ("Basia", "banan"),
    ("Olek", "banan"),
    ("Basia", "jab≈Çko"),
]
client_counts={}
for name, item in purchases:
    client_counts[name]=client_counts.get(name,0)+1
print(client_counts)
print("******************************************************")

product_counts={}
for name, item in purchases:
    product_counts[item]=product_counts.get(item,0)+1
print(product_counts)
print("******************************************************")

client_items={}
for name, item in purchases:
    client_items[name]=client_items.get(item,[])+client_items[item]
print(client_items)